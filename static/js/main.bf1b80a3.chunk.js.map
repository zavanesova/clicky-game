{"version":3,"sources":["components/PicCard/index.js","components/Score/index.js","App.js","serviceWorker.js","index.js"],"names":["PicCard","props","react_default","a","createElement","className","onClick","evaluateClick","id","alt","src","image","Score","score","topScore","App","state","pics","shake","shufflePics","imgs","_this","sort","Math","random","setState","forceUpdate","find","arr","i","clicked","endGame","this","forEach","pic","_this2","components_Score","onAnimationEnd","map","components_PicCard","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"81DAaeA,MAVf,SAAiBC,GACb,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAAOC,QAAS,kBAAML,EAAMM,cAAcN,EAAMO,MAC3DN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACXH,EAAAC,EAAAC,cAAA,OAAKK,IAAKR,EAAMO,GAAIE,IAAKT,EAAMU,iBCMhCC,MAVf,SAAeX,GACX,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SAASG,GAAG,YACvBN,EAAAC,EAAAC,cAAA,MAAIC,UAAU,QAAd,eACAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,UAAd,UAA+BJ,EAAMY,MAArC,eAAwDZ,EAAMa,mBCiF3DC,6MAhFbC,MAAQ,CACNC,OACAJ,MAAO,EACPC,SAAU,EACVI,OAAO,KAOTC,YAAc,WACZ,IAAMC,EAAOC,EAAKL,MAAMC,KAAKK,KAAK,kBAAMC,KAAKC,SAAW,KACxDH,EAAKI,SAAS,CAAEL,SAChBC,EAAKK,iBAePnB,cAAgB,SAAAC,GACda,EAAKL,MAAMC,KAAKU,KAAK,SAACC,EAAKC,GACzB,GAAGD,EAAIpB,KAAOA,EAAI,CAChB,IAAuB,IAApBS,EAAKY,GAAGC,QAIT,OAHAb,EAAKY,GAAGC,SAAU,EAClBT,EAAKI,SAAS,CAAEZ,MAAOQ,EAAKL,MAAMH,MAAQ,IAC1CQ,EAAKF,eACE,EAEPE,EAAKI,SAAS,CAAEP,OAAO,IACvBG,EAAKU,iGA/BXC,KAAKb,gDAUFa,KAAKhB,MAAMH,MAAQmB,KAAKhB,MAAMF,UAC/BkB,KAAKP,SAAS,CAAEX,SAAUkB,KAAKhB,MAAMH,QAEvCmB,KAAKhB,MAAMC,KAAKgB,QAAQ,SAAAC,GACtBA,EAAIJ,SAAU,IAEhBE,KAAKP,SAAS,CAAEZ,MAAO,qCAqBhB,IAAAsB,EAAAH,KACP,OACE9B,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACgC,EAAD,CACAvB,MAAOmB,KAAKhB,MAAMH,MAClBC,SAAUkB,KAAKhB,MAAMF,WAErBZ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,yCACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,yBACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,aAAd,eACAH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,QAAb,6EAGJH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,yBACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAW,UAAY2B,KAAKhB,MAAME,MAAQ,SAAW,YAAamB,eAAgB,kBAAMF,EAAKV,SAAS,CAAEP,OAAO,MACjHc,KAAKhB,MAAMC,KAAKqB,IAAI,SAAAJ,GAAG,OACtBhC,EAAAC,EAAAC,cAACmC,EAAD,CACAhC,cAAiB4B,EAAK5B,cACtBC,GAAI0B,EAAI1B,GACRgC,IAAKN,EAAI1B,GACTG,MAAOuB,EAAIvB,YAKfT,EAAAC,EAAAC,cAAA,cACEF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,eAAd,kCAxEQoC,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO9C,EAAAC,EAAAC,cAAC6C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.bf1b80a3.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction PicCard(props) {\n    return (\n        <div className=\"card\" onClick={() => props.evaluateClick(props.id)}>\n            <div className=\"img-container\">\n                <img alt={props.id} src={props.image} />\n            </div>\n        </div>\n    );\n}\n\nexport default PicCard;","import React from \"react\";\nimport \"./style.css\";\n\nfunction Score(props) {\n    return(\n        <div className=\"header\" id=\"myHeader\">\n            <h1 className=\"name\">Clicky Game</h1>\n            <h1 className=\"scores\">Score: {props.score} Top Score: {props.topScore}</h1>\n        </div>\n    )\n}\n\n\nexport default Score;","import React, { Component } from 'react';\nimport './App.css';\nimport PicCard from \"./components/PicCard\";\nimport Score from \"./components/Score\";\nimport pics from \"./pics.json\";\n\n\nclass App extends Component {\n  state = {\n    pics,\n    score: 0,\n    topScore: 0,\n    shake: false\n  };\n\n  componentDidMount(){\n    this.shufflePics();\n  }\n\n  shufflePics = () => {\n    const imgs = this.state.pics.sort(() => Math.random() - 0.5);\n    this.setState({ imgs });\n    this.forceUpdate();\n  }\n\n  endGame() {\n    if(this.state.score > this.state.topScore) {\n      this.setState({ topScore: this.state.score });\n    };\n    this.state.pics.forEach(pic => {\n      pic.clicked = false;\n    });\n    this.setState({ score: 0 });\n    // return true;\n  }\n\n\n  evaluateClick = id => {\n    this.state.pics.find((arr, i) => {\n      if(arr.id === id) {\n        if(pics[i].clicked === false) {\n          pics[i].clicked = true;\n          this.setState({ score: this.state.score + 1 });\n          this.shufflePics();\n          return true;\n        }else{\n          this.setState({ shake: true });\n          this.endGame();\n        }\n      }\n    });\n  }\n\n  render() {\n    return(\n      <div>\n        <Score\n        score={this.state.score}\n        topScore={this.state.topScore}\n        />\n        <div className=\"jumbotron jumbotron-fluid text-center\">\n          <div className=\"container text-center\">\n            <h1 className=\"display-4\">Clicky Game</h1>\n            <p className=\"lead\">Click on an image to earn points, but don't click the same image twice!</p>\n          </div>\n        </div>\n        <div className=\"container text-center\">\n        <div className={\"shake-\" + (this.state.shake ? \"active\" : \"inactive\")} onAnimationEnd={() => this.setState({ shake: false })}>\n          {this.state.pics.map(pic => (\n            <PicCard\n            evaluateClick = {this.evaluateClick}\n            id={pic.id}\n            key={pic.id}\n            image={pic.image}\n            />\n          ))}\n        </div>\n        </div>\n        <footer>\n          <h5 className=\"text-center\">Spongebob Clicky Game</h5>\n        </footer>\n      </div>\n    )\n  }\n}\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}