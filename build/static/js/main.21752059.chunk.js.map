{"version":3,"sources":["components/PicCard/PicCard.js","App.js","serviceWorker.js","index.js"],"names":["PicCard","props","react_default","a","createElement","className","alt","id","src","image","App","state","pics","shufflePics","imgs","_this","sort","Math","random","setState","forceUpdate","this","_this2","map","pic","PicCard_PicCard","key","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"40DAaeA,MAVf,SAAiBC,GACb,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACXH,EAAAC,EAAAC,cAAA,OAAKE,IAAKL,EAAMM,GAAIC,IAAKP,EAAMQ,kBC+ChCC,6MAhDbC,MAAQ,CACNC,UAGFC,YAAc,WASZ,IAAMC,EAAOC,EAAKJ,MAAMC,KAAKI,KAAK,kBAAMC,KAAKC,SAAW,KACxDH,EAAKI,SAAS,CAAEL,SAChBC,EAAKK,kGAILC,KAAKR,+CAGE,IAAAS,EAAAD,KACP,OACEnB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,yBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,yCACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,aAAd,eACAH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,QAAb,6EAGHgB,KAAKV,MAAMC,KAAKW,IAAI,SAAAC,GAAG,OACtBtB,EAAAC,EAAAC,cAACqB,EAAD,CACAlB,GAAIiB,EAAIjB,GACRmB,IAAKF,EAAIjB,GACTE,MAAOe,EAAIf,MACXkB,QAASL,EAAKT,wBArCNe,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOjC,EAAAC,EAAAC,cAACgC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.21752059.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction PicCard(props) {\n    return (\n        <div className=\"card\">\n            <div className=\"img-container\">\n                <img alt={props.id} src={props.image} />\n            </div>\n        </div>\n    );\n}\n\nexport default PicCard;","import React, { Component } from 'react';\nimport './App.css';\nimport PicCard from \"./components/PicCard/PicCard\";\nimport pics from \"./pics.json\";\n\nclass App extends Component {\n  state = {\n    pics\n  };\n\n  shufflePics = () => {\n    // let i = data.length -1;\n    // while(i>0) {\n    //   let j = Math.floor(Math.random() * (i + 1));\n    //   let temp = data[i];\n    //   data[i] = data[j];\n    //   data[j] = temp;\n    // }\n    // this.setState({ data })\n    const imgs = this.state.pics.sort(() => Math.random() - 0.5);\n    this.setState({ imgs });\n    this.forceUpdate();\n  }\n\n  componentDidMount(){\n    this.shufflePics();\n  }\n\n  render() {\n    return(\n      <div className=\"container text-center\">\n        <div className=\"jumbotron jumbotron-fluid text-center\">\n          <div className=\"container\">\n            <h1 className=\"display-4\">Clicky Game</h1>\n            <p className=\"lead\">Click on an image to earn points, but don't click the same image twice!</p>\n          </div>\n        </div>\n        {this.state.pics.map(pic => (\n          <PicCard\n          id={pic.id}\n          key={pic.id}\n          image={pic.image}\n          onClick={this.shufflePics}\n          />\n        ))}\n      </div>\n    )\n  }\n\n\n}\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}